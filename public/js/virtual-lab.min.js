/* - - -  -  - Variables globales - - - -  - - -*/
var pointer = {
	clicked : false,
  pastClicked : false,
	x : -1,
	y : -1,
  width: 5,
  height : 5
}

var circleYellow ={},
    circleBlue ={},
    circlePurple = {},
    circleRed = {},
    click = {},
    distance = {},
    leftPanel = {};

var tubosEnMundo = {};

var configDimensions = {
	camWidth : video.width,
	camHeight : video.height
};

/* - - -  -  - Variables globales - - - -  - - -*/

/* -  - - - - - Funciones globales - -- - - - - - -*/

function getTextColor(hexColor){

  if(typeof hexColor != 'string') hexColor = hexColor.toString();

  var red = parseInt(hexColor.replace('#','').substring(0, 2).toString(), 16)
  var green = parseInt(hexColor.replace('#','').substring(2, 4).toString(), 16)
  var blue = parseInt(hexColor.replace('#','').substring(4, 6).toString(), 16)


  var text = "#000000"
  if ((red*0.299 + green*0.587 + blue*0.114) > 186){
     text = "#000000"
  } else {
    text='#ffffff';
  }

  return text;
}

function createTubo(sustName, x, y, color){
  var tmpSprite = game.add.sprite(x, y, 'element');
     tmpSprite.anchor.set(0.5,0.5);
      tmpSprite.name = sustName
      tmpSprite.tint = +('0x'+color);
      console.log(+('0x'+color), color)
   //TODO: Load color and properties

   tmpSprite.masker = {
    getX :function() {
       return tmpSprite.x - 50;
    },
    getY : function(){
      return tmpSprite.y - 50;
    },
    width: tmpSprite.width + 50,
    height : tmpSprite.height + 50
 }

  var tuboEnsaye = {
      sustName : sustName,
      sprite : tmpSprite,
      pastTouched : false,
      touched : false
   };


   /*for(var i = 0; i < 10; i++){
    var sprite1 = game.add.sprite(tmpSprite.x -  game.rnd.realInRange(5, 10), tmpSprite.y - 100, 'balls');
        sprite1.scale.setTo(0.5, 0.5);

        tuboEnsaye.sustances.push(sprite1);
   }*/


   /*var middleWidth = (tmpSprite.width/2);
   var middleHeight = (tmpSprite.height/2);

   tmpSprite.customBounds = [
     game.add.sprite(x - middleWidth +5, y - middleHeight , 'leftTube'),
     game.add.sprite(x + middleWidth - 10, y - middleHeight, 'leftTube'),
     game.add.sprite(x - middleWidth, y + middleHeight - 20, 'bottomTube')
   ]*/



   game.physics.ninja.enableAABB(tmpSprite);

  var style = { font: "30px Arial", wordWrap: true, wordWrapWidth: tmpSprite.width, align: "center", fill:getTextColor(color)};

      tmpSprite.textName = game.add.text(x, y, sustName, style);
      tmpSprite.textName.anchor.set(0.5);

   tubosEnMundo[sustName] = tuboEnsaye;

   return tuboEnsaye;
}

function collidex(one, two){
  var oneMask = one.masker ? one.masker : {x : one.x, y : one.y, width : one.width, height: one.height};
  var twoMask = two.masker ? two.masker : {x : two.x, y : two.y,  width : two.width, height: two.height};


  oneMask.x = oneMask.getX ? oneMask.getX() : oneMask.x;
  twoMask.x = twoMask.getX ? twoMask.getX() : twoMask.x;

  //console.log(oneMask.x,oneMask.width, twoMask.x, twoMask.width)

  if( (oneMask.x >= twoMask.x  && oneMask.x <= twoMask.x + twoMask.width) ||
      (oneMask.x + oneMask.width <= twoMask.x + twoMask.width  && oneMask.x + oneMask.width >= twoMask.x) ||
      (twoMask.x >= oneMask.x  && twoMask.x <= oneMask.x + oneMask.width)
    ){
    return true;
  }

  return false;
}

function collidey(one, two){
  var oneMask = one.masker ? one.masker : {x : one.x, y : one.y, width : one.width, height: one.height};
  var twoMask = two.masker ? two.masker : {x : two.x, y : two.y,  width : two.width, height: two.height};


  oneMask.y = oneMask.getY ? oneMask.getY() : oneMask.y;
  twoMask.y = twoMask.getY ? twoMask.getY() : twoMask.y;

  //console.log(oneMask.x,oneMask.width, twoMask.x, twoMask.width)

  if( (oneMask.y >= twoMask.y  && oneMask.y <= twoMask.y + twoMask.height) ||
      (oneMask.y + oneMask.height <= twoMask.y + twoMask.height  && oneMask.y + oneMask.height >= twoMask.y) ||
      (twoMask.y >= oneMask.y  && twoMask.y <= oneMask.y + oneMask.height)
    ){
    return true;
  }

  return false;
}

function collide(one, two){
  return collidey(one, two) && collidex(one, two);
}

function getRandomColor(){
  var color = '#';

  for(var i = 0; i < 6; i++){
    color += "abcdef0123456789"[Math.floor(Math.random() * 100) %16];
  }

  return color;

}

/* -  - - - - - Funciones globales - -- - - - - - -*/
var mainGame = {};


var game = new Phaser.Game(1300, 600, Phaser.AUTO, 'gameFrame');


//var compuestoService = require('../services/compuestoService.js');
var unlockedCompuestos = [
	{
		compuestoKey: 'Na',
		name: 'Sodio',
		components: [],
		description: 'El sodio es un elemento químico de símbolo Na (del latín, natrium) con número atómico 11, fue aislado por sir Humphry Davy en 1807. Es un metal alcalino blando, untuoso, de color plateado, muy abundante en la naturaleza, encontrándose en la sal marina y el mineral halita. Es muy reactivo, arde con llama amarilla, se oxida en presencia de oxígeno y reacciona violentamente con el agua.',
		image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Na%2B.svg/245px-Na%2B.svg.png',
		locked: true
	},
	{
		compuestoKey: 'NaCl',
		name: 'Clorudo de sodio',
		components: ['Na', 'Cl', 'Na', 'Cl', 'Na', 'Cl', 'Na', 'Cl', 'Na', 'Cl'],
		description: 'El cloruro de sodio es una de las sales responsable de la salinidad del océano y del fluido extracelular de muchos organismos. También es el mayor componente de la sal comestible, comúnmente usada como condimento y conservante de comida.',
		image: 'http://callisto.ggsrv.com/imgsrv/FastFetch/UBER2/00060202',
		locked: true
	}
];
var desktopBackground;
var bookSprite;
var openBookSound;
var switchPage;
var lastIndex = 0;
var index;
var compuestoName;
var compuestoKey;
var compuestoComponents;
var compuestoDescription;
var compuestoImage;
var backButton;
var fowardButton;
var bookGroup;
var compuestopedia = {
	preload: function(){
		game.load.image('desktopBackground', R.desktopBackground);
		game.load.image('transparentButton', R.transparentButton);
		game.load.spritesheet('book', R.book, 372, 299);
		game.load.audio('openBook', R.openBook);
		game.load.audio('switchPage', R.switchPage);
		for(var i = 0; i < unlockedCompuestos.length; i++){
			game.load.image(unlockedCompuestos[i].compuestoKey, unlockedCompuestos[i].image);
		}


	},
	create: function(){
		/*compuestoService.GetUnlockedCompuestos().then(function(compuestos){
			unlockedCompuestos = compuestos;
		});*/
		desktopBackground = game.add.tileSprite(0, 0, 1024, 768,'desktopBackground');
		desktopBackground.scale.setTo(1.28, 1);
		bookSprite = game.add.sprite(game.width/2, game.height/3, 'book');
		bookSprite.frame = 0;
		bookSprite.anchor.setTo(0.5);
		bookSprite.scale.setTo(2);
		fowardButton = game.add.button(game.width - game.width/2 + 50, game.height/4 -30, 'transparentButton', this.nextPage, this);
		fowardButton.width = 299;
		fowardButton.height = 372;
		backButton = game.add.button(game.width/4 + 50, game.height/4 -30, 'transparentButton', this.prevPage, this);
		backButton.width = 299;
		backButton.height = 372;
		openBookSound = game.add.audio('openBook', 1);
		switchPage = game.add.audio('switchPage', 1);
		bookSprite.animations.add('open', [0,1,7],3, false);
		bookSprite.animations.add('swhichSheet', [8, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 7], 8);
		bookSprite.animations.add('reverseSwhichSheet', [7, 6, 13, 5, 12, 4, 11, 3, 10, 2, 9, 8, 7], 7);
		bookSprite.animations.add('closeBook', [15, 16, 17, 18, 19], 15);
		bookSprite.animations.add('ReverseCloseBook', [19, 18, 17, 16, 15, 7], 19);

		openBookSound.play();
		bookSprite.animations.play('open').onComplete.add(function(){
			compuestopedia.getCompuesto();
		});
		compuestoName = game.add.text(game.width/3, game.height/4, '', {
			font: 'bold 30px sans-serif',
			fill: 'black',
			align: 'center',
			wordWrap: true,
			wordWrapWidth: 300,
		});
		compuestoKey = game.add.text(game.width/3 + 70, game.height/3 - 14, '', {
			font: 'bold 24px sans-serif',
			fill: 'black',
			align: 'center',
			wordWrap: true,
			wordWrapWidth: 20,
		});
		compuestoComponents = game.add.text(game.width/3 - 40, (game.height/3 * 2) -30 , '', {
			font: 'bold 24px sans-serif',
			fill: 'black',
			align: 'center',
			wordWrap: true,
			wordWrapWidth: 300,
		});
		compuestoDescription = game.add.text(game.width/2 + 50, game.height/4 + 30, '', {
			font: 'bold 15px sans-serif',
			fill: 'black',
			align: 'left',
			wordWrap: true,
			wordWrapWidth: 250,
		});
		compuestoImage = game.add.sprite(game.width/3+ 20, game.height/2.5, '');
		compuestoImage.height = 10;
		compuestoImage.width = 10;

		bookGroup = game.add.group();
		bookGroup.add(compuestoName);
		bookGroup.add(compuestoKey);
		bookGroup.add(compuestoDescription);
		bookGroup.add(compuestoComponents);
		bookGroup.add(compuestoImage);
		index = 0;

	},
	update: function(){
	},
	listener: function(){
		if(index < unlockedCompuestos.length){
			bookGroup.visible = false;
			switchPage.play();
			if(index >= lastIndex){
				bookSprite.animations.play('swhichSheet').onComplete.add(function(){
					bookGroup.visible = true;

				});
			} else if(index <= lastIndex){
				bookSprite.animations.play('reverseSwhichSheet').onComplete.add(function(){
					bookGroup.visible = true;
				});
			}
			this.getCompuesto();
		}else {
			if(index <= lastIndex){
				openBookSound.play();
				bookSprite.animations.play('ReverseCloseBook').onComplete.add(function(){
					bookGroup.visible = true;
				});
			}else{
				openBookSound.play();
				bookSprite.animations.play('closeBook');
				bookGroup.visible = false;
			}
		}
		lastIndex = index;

	},
	nextPage: function(){
		if(index >= unlockedCompuestos.length){

		}else{
			index++;
		}

		this.listener();
	},
	prevPage: function(){
		if(index >=  unlockedCompuestos.length){
			this.listener();
			index--;
		}else {
			if(index <= 0){

			}else{
				index--;
			}

			this.listener();
		}

	},
	getCompuesto: function(){
		compuestoName.text = unlockedCompuestos[index].name;
		compuestoKey.text = '(' + unlockedCompuestos[index].compuestoKey + ')';
		compuestoComponents.text = '';
		for(var i = 0; i < unlockedCompuestos[index].components.length; i++){
			compuestoComponents.text =  compuestoComponents.text + unlockedCompuestos[index].components[i] + ' ';
		}
	 	compuestoDescription.text = unlockedCompuestos[index].description;
		compuestoImage.loadTexture(unlockedCompuestos[index].compuestoKey);



	 	//compuestoImage.text = unlockedCompuestos[index].name;
/*
	 	compuestoKey.text = ;
	 	compuestoComponents.text = ;
	 	compuestoDescription.text = ;
	 	compuestoImage.text = ;*/




	}
}

var pre_elements = [];

    
mainGame.create  = function create() {
   back = game.add.sprite(0, 0, 'background');
   table = game.add.sprite(230, 570, 'table');
        

   back.scale.set(1.3,1)
   var graphics = game.add.graphics(0, 0);

   window.graphics = graphics;

   game.physics.startSystem(Phaser.Physics.NINJA);

    game.physics.ninja.enableAABB(table);


	 circleYellow = new Phaser.Circle(game.world.centerX, game.world.centerY,12);
	 circleBlue = new Phaser.Circle(game.world.centerX, game.world.centerY,12);
  
   game.stage.backgroundColor = "#4488AA";
   leftPanel = game.add.sprite(-250, 0, 'left-panel');
   leftPanel.masker = {
     x  : 250,
     y  : 246,
     getX : function() { return 250 + leftPanel.x },
     width : 100,
     height: 334
   }  

   
   leftPanel.topMargin = 50;
   leftPanel.maxHeightSize = 0;
   game.world.sendToBack(leftPanel)
   game.world.sendToBack(back)

   var xini = leftPanel.x;
   var xend = leftPanel.x + leftPanel.width - 50;
   var elementsPerRow = 6;

   var widthElement = (xend -xini) / elementsPerRow;
   var heightElement = 50;
   var rows = Math.ceil(elementsItems.length / elementsPerRow);

   for(var i = 0; i < rows; i++){
      for(var j = 0; j < elementsPerRow; j++){
        var tempEl = elementsItems[(i*elementsPerRow)+j];
        if(tempEl) {
          var rect = new Phaser.Rectangle(
            (j*widthElement) ,
            (i*heightElement) + leftPanel.topMargin,
            widthElement,
            heightElement);
          rect.color = tempEl ? tempEl.cpkHexColor :'000';
          rect.inix = rect.x;
          rect.iniy = rect.y;

          var style = { font: "30px Arial", wordWrap: true, wordWrapWidth: rect.width, align: "center", fill:getTextColor(rect.color)};

          leftPanel.maxHeightSize = rect.y;

          text = game.add.text(-50, -50, tempEl.symbol, style);
          text.anchor.set(0.5);

          pre_elements.push({rect:rect, name: text, item: tempEl})
        }
      }
   }

   leftPanel.topPad    = game.add.sprite(leftPanel.x, 0, 'leftPanelPadTop');
   leftPanel.bottomPad = game.add.sprite(leftPanel.x, leftPanel.height - 50, 'leftPanelPadBottom');


   leftPanel.inputEnabled = true;

   leftPanel.events.onInputDown.add(function(){
      if(leftPanel.x){  
       leftPanel.x = 0;
     } else {
      leftPanel.x = -250;
     }

                leftPanel.topPad.x = leftPanel.x;
                leftPanel.bottomPad.x = leftPanel.x;
   }, this);   

}

var tracker = new tracking.ColorTracker(['yellow', 'cyan']);

tracker.setMinDimension(5);
tracking.track('#video', tracker, { camera: true });


tracker.on('track', function(event) {
    var yellowRects = {
      x : Infinity,
      y : Infinity
    };

    var blueRects = {
      x : Infinity,
      y : Infinity
    };

    event.data.forEach(function(rect) {
      if(rect.color === 'yellow'){
        yellowRects.x = Math.min(yellowRects.x,rect.x);
        yellowRects.y = Math.min(yellowRects.y,rect.y);
        yellowRects.width = rect.width;
        yellowRects.height = rect.height;
      }

      if(rect.color === 'cyan'){
        blueRects.x = Math.min(rect.x,blueRects.x);
        blueRects.y = Math.min(rect.y,blueRects.y);
         blueRects.width = rect.width;
        blueRects.height = rect.height;
      }

    });

    if(yellowRects.x != Infinity){
          var newX = (game.width-((yellowRects.x / configDimensions.camWidth) * game.width)) ;
          circleYellow.x = newX;
          circleYellow.y = (yellowRects.y / configDimensions.camHeight) * game.height;
    }

    if(blueRects.x != Infinity){
          var newX = (game.width-((blueRects.x / configDimensions.camWidth) * game.width));
          circleBlue.x = newX;
          circleBlue.y = (blueRects.y / configDimensions.camHeight)  * game.height;
    }
});

var background;
var buttonInit;
var buttonAbout;
var buttonCompuestopedia;
var startText;
var aboutText;
var compuestopediaTxt;
var boilding;
var clinking;
var mice;
var windowSprite;
var windowGroup;
var aboutWindowText;
var aboutDevelopersText;
var aboutVersionText;
var buttonCloseAboutWindow;
var closeAboutWindowText;
var menu = {
	preload : function(){
		game.load.image('labBackgroundBlur', R.labBackgroundBlur);
		game.load.image('button', R.button);
		game.load.image('window', R.aboutWindow);
		game.load.audio('boilding', R.boilding);
		game.load.audio('clinking', R.clinking);
		game.load.audio('mice', R.mice);
	},
	create: function(){

		boilding = game.add.audio('boilding', 1, true); clinking =
		game.add.audio('clinking', 1, true);
		mice = game.add.audio('mice', 1, true);

		boilding.play();
		clinking.play();
		mice.play();
		background = game.add.tileSprite(0, 0, 1024, 768, 'labBackgroundBlur');

		buttonInit = game.add.button(game.width/2, game.height/3, 'button', this.initGame, this);
		buttonCompuestopedia = game.add.button(game.width/2, game.height/2, 'button', this.openCompuestopedia, this);
		buttonAbout = game.add.button(game.width/2, game.height/2+120, 'button', this.openAboutWindow, this);

		startText = game.add.text(game.width/2 - 30, game.height/3 - 14, 'Iniciar', {
			font: 'bold 24px sans-serif',
			fill: 'white',
			align: 'center'
		});
		compuestoPediaText = game.add.text(game.width/2 - 100, game.height/2 - 14, 'Compuesto-pedia', {
			font: 'bold 24px sans-serif',
			fill: 'white',
			align: 'center'
		});
		aboutText = game.add.text(game.width/2 - 50, game.height/2 + 110, 'Acerca de', {
			font: 'bold 24px sans-serif',
			fill: 'white',
			align: 'center'
		});
		background.scale.setTo(1.27, 1);
		buttonInit.anchor.setTo(0.5);
		buttonInit.scale.setTo(0.5);
		buttonAbout.anchor.setTo(0.5);
		buttonAbout.scale.setTo(0.5);
		buttonCompuestopedia.anchor.setTo(0.5);
		buttonCompuestopedia.scale.setTo(0.5);

	},
	openAboutWindow: function(){
		buttonInit.input.enabled = false;
		buttonAbout.input.enabled = false;
		buttonCompuestopedia.input.enabled = false;

		windowGroup = game.add.group();
		buttonCloseAboutWindow = game.add.button(game.width/2, (game.height/4)*3-50, 'button', this.closeAboutWindow, this);
		windowSprite = game.add.sprite(game.width/2, game.height/2, 'window');
		aboutWindowText = game.add.text(game.width/2, game.height/4+20, 'VirtuaLab es un juego interactivo para \n aprender sobre compuestos quimicos', {
				font: 'bold 16px sans-serif',
				fill: 'black',
				align: 'center'
			});
		aboutDevelopersText = game.add.text(game.width/2-10, game.height/2-50, 'Desarrollado por: \n Mixtega Pacheco Mario Alejandro \n Lopez Rios Fernanda Ximena \n Villafuerte Salazar Yael', {
				font: 'bold 16px sans-serif',
				fill: 'black',
				align: 'left'
			});
		aboutVersionText = game.add.text((game.width/3)*2-25, (game.height/4)*3-10, 'version: Alpha 0.1', {
				font: 'bold 10px sans-serif',
				fill: 'black',
				align: 'left'
			});
		closeAboutWindowText = game.add.text(game.width/2, (game.height/4)*3-45, 'cerrar', {
				font: 'bold 18px sans-serif',
				fill: 'white',
				align: 'center'
			});
		windowGroup.add(windowSprite);
		windowGroup.add(aboutWindowText);
		windowGroup.add(aboutDevelopersText);
		windowGroup.add(aboutVersionText);
		windowGroup.add(buttonCloseAboutWindow);
		windowGroup.add(aboutWindowText);
		windowGroup.add(closeAboutWindowText);


		windowSprite.anchor.setTo(0.5);
		aboutWindowText.anchor.setTo(0.5);
		aboutDevelopersText.anchor.setTo(0.5);
		aboutVersionText.anchor.setTo(0.5);
		closeAboutWindowText.anchor.setTo(0.5);
		buttonCloseAboutWindow.anchor.setTo(0.5);

		buttonCloseAboutWindow.scale.setTo(0.3);
	},
	closeAboutWindow: function(){
		windowGroup.destroy();

		buttonInit.input.enabled = true;
		buttonAbout.input.enabled = true;
		buttonCompuestopedia.input.enabled = true;

	},
	initGame: function(){

	},
	openCompuestopedia: function(){
		boilding.stop();
		clinking.stop();
		mice.stop();
		game.state.start('compuestopedia');
	}
};

var map = {};
map['Na'] = {
		name : 'Na',
		map : []
	}
map['Na'].map['Cl']= {
	name : 'NaCl', 
	map : []
}
var prevNode;
mixerCtrl('Na');
mixerCtrl('Cl');
mixerCtrl('Cl');


function mixerCtrl(key){
	if(!prevNode){
		console.log('empty');

		prevNode = map[key].map;
		console.log(key);
		return;
	}
	else{
		if(key in prevNode){
			prevNode = prevNode[key].map;
			console.log('prevMap changed');
			console.log(key);
			return true;
		}
		else{
			prevNode = null;
			console.log('prevMap emptied');
			console.log('Match not found');
			return false;
		}
	}
	
	
}
function createPreviewBounds(x, y, w, h, customBounds) {
    

    var sim = game.physics.p2;

    //  If you want to use your own collision group then set it here and un-comment the lines below
    var mask = sim.boundsCollisionGroup.mask;

    customBounds.left = new p2.Body({ mass: 0, position: [ sim.pxmi(x), sim.pxmi(y) ], angle: 1.5707963267948966 });
    customBounds.left.addShape(new p2.Plane());
    // customBounds.left.shapes[0].collisionGroup = mask;

    customBounds.right = new p2.Body({ mass: 0, position: [ sim.pxmi(x + w), sim.pxmi(y) ], angle: -1.5707963267948966 });
    customBounds.right.addShape(new p2.Plane());
    // customBounds.right.shapes[0].collisionGroup = mask;

    customBounds.top = new p2.Body({ mass: 0, position: [ sim.pxmi(x), sim.pxmi(y) ], angle: -3.141592653589793 });
    customBounds.top.addShape(new p2.Plane());
    // customBounds.top.shapes[0].collisionGroup = mask;

    customBounds.bottom = new p2.Body({ mass: 0, position: [ sim.pxmi(x), sim.pxmi(y + h) ] });
    customBounds.bottom.addShape(new p2.Plane());
    // customBounds.bottom.shapes[0].collisionGroup = mask;

    sim.world.addBody(customBounds.left);
    sim.world.addBody(customBounds.right);
    sim.world.addBody(customBounds.top);
    sim.world.addBody(customBounds.bottom);

}


mainGame.preload = function preload() {
	 game.load.image('ensaye-tube', R.ensayeTube);
	 game.load.image('background', R.background);
	 game.load.image('left-panel', R.leftPanel);
	 game.load.image('leftTube', R.leftTube);
	 game.load.image('bottomTube', R.bottomTube );
	 game.load.image('element', R.element );
	 game.load.image('leftPanelPadTop', R.leftPanelPadTop );	
	 game.load.image('leftPanelPadBottom', R.leftPanelPadBottom );	
	 game.load.image('table',R.table)

	 game.load.spritesheet('balls', R.ball, 17, 17);
}

var R = {
	ensayeTube         : '/imgs/tubo.png',
	background         : '/imgs/labBackground.jpg',
	leftPanel          : '/imgs/left_panel.png',
	ball               : '/imgs/balls.png',
	leftTube           : '/imgs/leftTupoTile.png',
	bottomTube         : '/imgs/bottomTubeTile.png',
	element            : '/imgs/element.png',
	leftPanelPadTop    : '/imgs/left_panel_pad.png',
	leftPanelPadBottom : '/imgs/left_panel_pad_bottom.png',
	labBackgroundBlur  : '/imgs/labBackgroundBlur.jpg',
	button             : '/imgs/button.png',
	aboutWindow        : '/imgs/window.png',
	boilding           : '/sounds/boilding_background.mp3',
	clinking           : '/sounds/clinking_background.mp3',
	mice               : '/sounds/mice_squeacking_background.mp3',
	desktopBackground  : '/imgs/desktop_background.jpg',
	transparentButton  : '/imgs/transparent_button.gif',
	book               : '/imgs/book_sprite_sheet.png',
	openBook           : '/sounds/open_book_sound.mp3',
	switchPage         : '/sounds/switch_page.mp3'
}

mainGame.render = function render(){
	graphics.clear();
	pre_elements.forEach(function(elementItem){

		var element = elementItem.rect;

   	 	graphics.beginFill(+('0x'+element.color));

    	graphics.moveTo(element.inix + leftPanel.x,element.iniy + leftPanel.y);
	    graphics.lineTo(element.inix + leftPanel.x + element.width, element.iniy + leftPanel.y);
	    graphics.lineTo(element.inix + leftPanel.x + element.width, element.iniy + leftPanel.y + element.height);
	    graphics.lineTo(element.inix + leftPanel.x, element.iniy + leftPanel.y + element.height);
	    graphics.moveTo(element.inix + leftPanel.x,element.iniy + leftPanel.y);
	    graphics.endFill();


		elementItem.name.x = element.x + (element.width/2);
		elementItem.name.y = element.y + (element.height/2);

		element.x = element.inix + leftPanel.x;
		element.y = element.iniy + leftPanel.y;

		//game.debug.geom(element);

	});

	Object.keys(tubosEnMundo).forEach(function(key){
				var tubo = tubosEnMundo[key];
				 game.debug.geom(tubo.sprite);


			});

	var colorYellow = '#fdf814';
	var colorBlue = '#33b3e8';

	if(click != null){
		colorYellow = colorBlue = '#09a28a';
	}

	if(circleYellow.x != Infinity){
	 game.debug.geom(circleYellow,colorYellow);

	}

	if(circleBlue.x != Infinity){
	 game.debug.geom(circleBlue,colorBlue);

	}









}

var baseUrl = 'http://localhost:3000';

function httpGetAsync(theUrl, callback) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            callback(JSON.parse(xmlHttp.responseText));
    }
    xmlHttp.open("GET", baseUrl+theUrl, true); // true for asynchronous 
    xmlHttp.send();
}

var Requester = {
	GetUnlockedElements : function(callback){
		httpGetAsync('/elements', callback)
	}
}
var threeshold = 50;
var inix = 0;
var newDistx  = 0
var velocityy = 0;
var velocityx = 0;



mainGame.update= function update() {

	distance = Math.sqrt(Math.pow(circleYellow.x - circleBlue.x,2)
				+ Math.pow(circleYellow.y - circleBlue.y,2));

	pointer.pastClicked = pointer.clicked;


	if(distance < threeshold){
		click = true;

			pointer.clicked = true;
			pointer.x = (circleYellow.x + circleBlue.x)/2;
			pointer.y = (circleYellow.y + circleBlue.y)/2;

			///if(!pointer.firstClick)
				pointer.firstClick = !pointer.pastClicked && pointer.clicked;

			inix = inix ? inix : (circleYellow.x + circleBlue.x)/2;
			newDistx = ((circleYellow.x + circleBlue.x)/2) - inix;

			//console.log("pointer.firstClick",pointer.firstClick,'leftPanel.activeClicked',leftPanel.activeClicked);

			if(collide(leftPanel, pointer) && (pointer.firstClick || leftPanel.activeClicked) ){
				leftPanel.activeClicked = true;
				if(leftPanel.x + newDistx < -200){
					leftPanel.x = -250;
				} else if(leftPanel.x + newDistx <= 0) {
					leftPanel.x = leftPanel.x + newDistx;
				} else {
					leftPanel.x = 0;
				}

				leftPanel.topPad.x = leftPanel.x;
                leftPanel.bottomPad.x = leftPanel.x;
			}

			pre_elements.forEach(function(element){
				if(collide(element.rect, pointer) && (pointer.firstClick || element.activeClicked) ){
					element.activeClicked = true;
					if(pointer.firstClick && !tubosEnMundo[element.item.symbol]){
						createTubo(element.item.symbol, pointer.x, pointer.y, element.rect.color);
						leftPanel.x = -250;
					}

					tubosEnMundo[element.item.symbol].sprite.x = pointer.x;
					tubosEnMundo[element.item.symbol].sprite.y = pointer.y;


				}
			});

			Object.keys(tubosEnMundo).forEach(function(key){
				var tubo = tubosEnMundo[key];
				if(collide(tubo.sprite, pointer) && (pointer.firstClick || tubo.activeClicked) ){
					tubo.activeClicked = true;

					if(tubo.sprite.x - pointer.x > 5){
						tubo.sprite.body.moveLeft(20);
					}

					if(pointer.x - tubo.sprite.x > 5){
						tubo.sprite.body.moveRight(20);
					}

					if(pointer.y - tubo.sprite.y > 5){
						tubo.sprite.body.moveDown(20);
					}

					if(tubo.sprite.y - pointer.y > 5){
						tubo.sprite.body.moveUp(20);
					}


					velocityx = Math.abs(tubo.sprite.x - pointer.x)/2;
					velocityy = Math.abs(tubo.sprite.y - pointer.y)/2;
				}

				 var tmpSprite = tubo.sprite;
			});


			//console.log(collide(leftPanel, pointer))
			//tuboEnsaye.rotation = Math.atan2(circleYellow.y - circleBlue.y, circleYellow.x - circleBlue.x)
	} else {
		pointer.firstClick = null;
		leftPanel.activeClicked = false;
		click = null;
		pointer.clicked = false;
		newDistx  = 0
		inix = 0;
		pre_elements.forEach(function(element){
			element.activeClicked = false;
		});

		Object.keys(tubosEnMundo).forEach(function(key){
				var tubo = tubosEnMundo[key];
				tubo.activeClicked = false;

			});
	}

	var pastKey = null;
	Object.keys(tubosEnMundo).forEach(function(key){
		var tubo = tubosEnMundo[key];
		var tmpSprite = tubo.sprite;

		function collide(elementa,elementb){
			if(elementb.name && elementa.name)
			{
				//TODO: Checar si es una combinacion chida
			}
		}

		if(pastKey){
			var pastSprite =tubosEnMundo[pastKey].sprite;
			game.physics.ninja.collide(tubo.sprite, pastSprite, collide, null, this);
		} else {
			pastKey = key;
		}

		tmpSprite.textName.x = tmpSprite.x;
		tmpSprite.textName.y = tmpSprite.y;
		game.physics.ninja.collide(tubo.sprite, table, collide, null, this);
		

	})


}



	game.state.add('menu', menu);
	game.state.add('compuestopedia', compuestopedia);
	game.state.add('mainGame', mainGame);
	game.state.start('menu');