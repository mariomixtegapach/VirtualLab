/* - - -  -  - Variables globales - - - -  - - -*/
var pointer = {
	clicked : false,
	x : -1,
	y : -1,
  width: 5,
  height : 5
}

var circleYellow, 
    circleBlue,
    circlePurple, 
    circleRed, 
    click, 
    distance,
    leftPanel;

var tubosEnMundo = [];

var configDimensions = {
	camWidth : video.width,
	camHeight : video.height
};

/* - - -  -  - Variables globales - - - -  - - -*/

/* -  - - - - - Funciones globales - -- - - - - - -*/

function createTubo(sustName, x, y){
  var tmpSprite = game.add.sprite(x, y, 'ensaye-tube');
      tmpSprite.anchor.set(0.5,0.5);

   //TODO: Load color and properties

   var tuboEnsaye = {
      sustName : sustName,
      sprite : tmpSprite,
      pastTouched : false,
      touched : false
   };

   tubosEnMundo.push(tuboEnsaye);

   return tuboEnsaye;
}

function collide(one, two){
  var oneMask = one.masker ? one.masker : {x : one.x, y : one.y, width : one.width, height: one.height};
  var twoMask = two.masker ? two.masker : {x : two.x, y : two.y,  width : two.width, height: two.height};


  oneMask.x = oneMask.getX ? oneMask.getX() : oneMask.x;
  twoMask.x = twoMask.getX ? twoMask.getX() : twoMask.x;

  console.log(oneMask.x,oneMask.width, twoMask.x, twoMask.width)

  if( (oneMask.x >= twoMask.x  && oneMask.x <= twoMask.x + twoMask.width) ||
      (oneMask.x + oneMask.width <= twoMask.x + twoMask.width  && oneMask.x + oneMask.width >= twoMask.x) ||
      (twoMask.x >= oneMask.x  && twoMask.x <= oneMask.x + oneMask.width)
    ){
    return true;
  }

  return false;
}


/* -  - - - - - Funciones globales - -- - - - - - -*/


var game = new Phaser.Game(800, 600, Phaser.AUTO, '', 
	{ 
		preload: preload, 
		create: create, 
		update: update,
		render: render 
	});




function create() {
	 circleYellow = new Phaser.Circle(game.world.centerX, game.world.centerY,12);
	 circleBlue = new Phaser.Circle(game.world.centerX, game.world.centerY,12);
             //   game.add.sprite(0,0,'background')

   game.stage.backgroundColor = "#4488AA";
   leftPanel = game.add.sprite(-250, 0, 'left-panel');
   leftPanel.masker = {
     x  : 250,
     y  : 246,
     getX : function() { console.log("Getting x"); return 250 + leftPanel.x },
     width : 100,
     height: 334,
     ylim : 334 
   }  
}

      
      var tracker = new tracking.ColorTracker(['yellow', 'magenta']);
      
      tracker.setMinDimension(5);
      tracking.track('#video', tracker, { camera: true });

      
      tracker.on('track', function(event) {
          var yellowRects = {
            x : Infinity,
            y : Infinity
          };

          var blueRects = {
            x : Infinity,
            y : Infinity
          };

          event.data.forEach(function(rect) {
            if(rect.color === 'yellow'){
              yellowRects.x = Math.min(yellowRects.x,rect.x);
              yellowRects.y = Math.min(yellowRects.y,rect.y);
            }
            
            if(rect.color === 'magenta'){
              blueRects.x = Math.min(rect.x,blueRects.x);
              blueRects.y = Math.min(rect.y,blueRects.y);
            }

          });
   
          if(yellowRects.x != Infinity){
                var newX = (game.width-((yellowRects.x / configDimensions.camWidth) * game.width)) ;
                circleYellow.x = newX;
                circleYellow.y = (yellowRects.y / configDimensions.camHeight) * game.height;
          }

          if(blueRects.x != Infinity){
                var newX = (game.width-((blueRects.x / configDimensions.camWidth) * game.width));
                circleBlue.x = newX;
                circleBlue.y = (blueRects.y / configDimensions.camHeight)  * game.height;
          }
      });


function preload() {
	 game.load.image('ensaye-tube', R.ensayeTube);
	 game.load.image('background', R.background);
	 game.load.image('left-panel', R.leftPanel);
}


var R = {
	ensayeTube : '/imgs/tubo.png',
	background : '/imgs/labBackground.jpg',
	leftPanel  : '/imgs/left_panel.png'
}
function render(){
	if(circleYellow.x != Infinity)
	 game.debug.geom(circleYellow,'#fdf814');
	
	if(circleBlue.x != Infinity)
	 game.debug.geom(circleBlue,'#33b3e8');

	if(click != null){
		game.debug.geom(click,  '#fdf814')
	}
	
}
var threeshold = 80;
var inix = 0;
var newDistx  = 0

function update() {

	distance = Math.sqrt(Math.pow(circleYellow.x - circleBlue.x,2) 
				+ Math.pow(circleYellow.y - circleBlue.y,2));

	if(distance < threeshold){
		click = 
			new Phaser.Rectangle(
				(circleYellow.x + circleBlue.x)/2,
				 (circleYellow.y + circleBlue.y)/2,
				  20,
				   20);

			pointer.clicked = true;
			pointer.x = (circleYellow.x + circleBlue.x)/2;
			pointer.y = (circleYellow.y + circleBlue.y)/2;

			inix = inix ? inix : (circleYellow.x + circleBlue.x)/2;
			newDistx = ((circleYellow.x + circleBlue.x)/2) - inix;
			
			if(collide(leftPanel, pointer)){
				if(leftPanel.x + newDistx < -200){
					leftPanel.x = -250;
				} else if(leftPanel.x + newDistx <= 0) {
					leftPanel.x = leftPanel.x + newDistx;
				} else {
					leftPanel.x = 0;
				}
			}

			//console.log(collide(leftPanel, pointer))
			//tuboEnsaye.rotation = Math.atan2(circleYellow.y - circleBlue.y, circleYellow.x - circleBlue.x)		
	} else {
		click = null;
		pointer.clicked = false;
		newDistx  = 0
		inix = 0;
	}

	//console.log(collide(leftPanel, pointer));
}